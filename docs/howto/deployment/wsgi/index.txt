===============
How to use WSGI
===============

Django can be deployed using WSGI -- the "Web Server Gateway Interface"
standard as defined in :pep:`333`. It is a specification for web servers
and application servers to communicate with web applications.

As part of this support Django it allows your to configure the WSGI
application object to be used by the :djadm:`runserver` management
command, the :ref:`FastCGI<fastcgi>` deployment backend (since it uses
WSGI behind the scenes) and any other WSGI compatible server.

Some of the more commonly used deployment tools are:

.. toctree::
   :maxdepth: 1

   modwsgi
   uwsgi

The ``application`` object
--------------------------

One key concept of deploying with WSGI is to specify a central application
object which the webserver uses to communicate with your Django code. This
application is commonly specified as an object called ``application`` in a
Python module usable by the server.

Django ships with such a WSGI handler in the ``django.core.handlers.wsgi``
module but offers further configurability with the :setting:`WSGI_APPLICATION`
setting.

The ``WSGI_APPLICATION`` setting
--------------------------------

The :setting:`WSGI_APPLICATION` setting should point to a WSGI compatible
application object, specified as a dotted Python path. By default the
:djadmin:`startproject` command creates a file called ``wsgi.py`` in the
project directory and automatically sets :setting:`WSGI_APPLICATION` to
``<PROJECT_NAME>.wsgi``. Django will internally automatically use this
module's application object when serving pages with the
:djadm:`development server <runserver>`.

For example the file generated by :djadmin:`startproject` looks like this::

    from django.core.management import setup_settings

    settings = setup_settings(__name__)

    # The application object is used by the development server
    # as well as a WSGI server configured to use this file.
    from django.core.handlers.wsgi import application

The call to setup_settings is required to make sure the settings are
configured correctly before importing the WSGI handler.

To apply `WSGI middlewares`_ you can simple wrap the application object
in the same file::

    from helloworld.wsgi import HelloWorldApplication
    application = HelloWorldApplication(application)

Of course usually you would have an actual Django WSGI application here,
but it also might make sense to replace the whole Django WSGI application
with a custom WSGI application that later delegates to the Django WSGI
application (for instance if you want to combine a Django application with
a WSGI application of another framework).

In case the :setting:`WSGI_APPLICATION` setting is ``None`` Django will
automatically use the ``django.core.handlers.wsgi.application`` object
directly.

.. _`WSGI middlewares`: http://www.python.org/dev/peps/pep-0333/#middleware-components-that-play-both-sides
