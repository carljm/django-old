===============
How to use WSGI
===============

Django's preferred platform of deployment is WSGI -- the "Web Server Gateway
Interface" standard as defined in :pep:`333` for web servers and application
servers that communicate with web applications.

Specifically, you can configure how WSGI is used by Django internally (e.g.  by
the :djadmin:`runserver` management command) and when deploying to an external
WSGI application server, such as one of the following:

.. toctree::
   :maxdepth: 1

   modwsgi
   uwsgi

The ``application`` object
--------------------------

One key concept of deploying with WSGI is to specify a central ``application``
object which the webserver uses to communicate with your code. This is commonly
specified as an object named ``application`` in a Python module accessible to
the server.

By default, Django's built-in servers will use an instance of
:class:`django.core.handlers.wsgi.WSGIHandler` as the WSGI application object,
but this can be configured via the :setting:`WSGI_APPLICATION` setting.

The ``WSGI_APPLICATION`` setting
--------------------------------

The :setting:`WSGI_APPLICATION` setting should point to a WSGI-compatible
application object, specified as a dotted Python import path. By default the
:djadmin:`startproject` command creates a module called ``wsgi.py`` inside the
project package and automatically sets :setting:`WSGI_APPLICATION` to
``projectname.wsgi.application``. Django will internally automatically use this
module's application object when serving pages with the :djadmin:`development
server <runserver>`.

For example the file generated by :djadmin:`startproject` contains::

    import os

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")

    # This application object is used by the development server
    # as well as any WSGI server configured to use this file.
    from django.core.handlers.wsgi import WSGIHandler
    application = WSGIHandler()

The ``os.environ.setdefault`` line just sets the default settings module to
use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE`
environment variable.

To apply `WSGI middlewares`_ you can simply wrap the application object
in the same file::

    from helloworld.wsgi import HelloWorldApplication
    application = HelloWorldApplication(application)

You could also replace the Django WSGI application with a custom WSGI
application that later delegates to the Django WSGI application, if you want to
combine a Django application with a WSGI application of another framework.

If the :setting:`WSGI_APPLICATION` setting is ``None``, Django will use an
instance of :class:`~django.core.handlers.wsgi.WSGIHandler` object as the
application object.

.. _`WSGI middlewares`: http://www.python.org/dev/peps/pep-0333/#middleware-components-that-play-both-sides
