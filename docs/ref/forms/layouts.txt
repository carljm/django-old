Form layouts
============

.. highlightlang:: html+django

Form layouts are reusable templates that contain information on how a form is
presented as HTML. In the following is described which layouts are available
by default and how to create your own ones. Have a look at the :ttag:`form
templatetags <form>` for more information on how to use them during form
rendering.

Built-in layouts
----------------

Django ships with three sample implementations of how a form layout could look
like.

``forms/layouts/p.html``
~~~~~~~~~~~~~~~~~~~~~~~~

**Default row template:** ``forms/rows/p.html``

``forms/layouts/ul.html``
~~~~~~~~~~~~~~~~~~~~~~~~~

**Default row template:** ``forms/rows/li.html``

``forms/layouts/table.html``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Default row template:** ``forms/rows/tr.html``

``forms/layouts/default.html``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Default row template:** ``forms/rows/default.html``

The code of the default layout actually looks like::

    {% extends "forms/layouts/p.html" %}

It is basically just a placeholder where you can drop in your own default
implementation of a form layout that is used project wide unless an
alternative layout is specified in the :ttag:`{% form ... %} <form>` tag.

.. _custom form layouts:

Create custom layouts
---------------------

Sometimes the sample layouts mentioned above just don't cut your needs. In
that case there are some possibilities to customize them. The simplest way is
to use django's template inheritance, extending from a built-in layout, and
only overwrite the bits you want to modify. In this case, use the layout that
matches your needs best and customize it by overriding one of the following
blocks:

* ``formconfig``: In this block happen all the ``{% formconfig %}`` tags that
  are used in the layout. The built-in layouts configure their row level
  template here.

* ``forms``: This one wraps the whole output. Use this to add markup before or
  after the rendered forms::

    {% extends "forms/layouts/p.html" %}

    {% block forms %}
        <form action="" method="post">{% csrf_token %}
            {{ block.super }}
            <p><input type="submit" value="submit" /></p>
        </form>
    {% endblock %}

  The preceding example shows a custom form layout that renders all elements
  in a paragraph based layout that also contains the necessary ``<form>`` tag
  and a submit button.

* ``errors``: All non field errors and errors of hidden fields are rendered
  in this block.

* ``rows``: The ``rows`` block contains a for loop that iterates over all
  visible fields and displays them in the ``row`` block. Hidden fields are
  rendered in the last row.

* ``row``: This block is wrapped around the ``{% formrow %}`` tag.

Alternatively it is of course possible to write your own form layout from
scratch. Have a look at the existing ones to get an idea what is possible,
what cases to take into account and how the template code could look like.

Form rows
~~~~~~~~~

A vital part of any form layout is one or are many templates for form
rows. A row can be used to render one or multiple fields in a repeating
manner.

The built-in row templates render each passed in field in a separate row. You
can extend and override these like you can with complete form layouts as
described above. Use the following blocks to customize them to your needs:

* ``row``: This is the most outer block and wraps all the generated HTML.
  Use it to wrap the row into additional markup.

* ``field``: You can use this block to wrap every single field into additional
  markup.

* ``errors``: Errors are displayed as a ``<ul>`` list. Override the ``errors``
  block to customize their appearance.

* ``label``: Change the label markup by overriding this block.

* ``widget``: This one contains just the ``{% formfield %}`` tag that will
  render the field's widget.

* ``help_text``: Change the help text markup by overriding this block.

* ``hidden_fields``: The built-in row templates allow hidden fields to be
  passed into the row with the template variable named ``hidden_fields``. The
  form layouts pass all the form's hidden fields into the last rendered form
  row.
